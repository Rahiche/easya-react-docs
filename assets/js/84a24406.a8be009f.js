"use strict";(self.webpackChunkeasya_react_docs=self.webpackChunkeasya_react_docs||[]).push([[540],{1371:(n,t,e)=>{e.r(t),e.d(t,{assets:()=>r,contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>o,toc:()=>u});const o=JSON.parse('{"id":"tutorials/build-a-custom-component","title":"Creating Custom UI Components","description":"This guide will walk you through creating custom UI components using the useBlockchain hook and implementing your own connect button similar to the pre-built components like AddressDisplay and BalanceDisplay.","source":"@site/docs/tutorials/build-a-custom-component.mdx","sourceDirName":"tutorials","slug":"/tutorials/build-a-custom-component","permalink":"/easya-react-docs/tutorials/build-a-custom-component","draft":false,"unlisted":false,"editUrl":"https://github.com/EasyA-Tech/layer-ui-react/tree/main/docs/docs/tutorials/build-a-custom-component.mdx","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Customizing Styles","permalink":"/easya-react-docs/tutorials/basic-styling"}}');var c=e(4848),s=e(8453);const a={},i="Creating Custom UI Components",r={},u=[{value:"Setting up the BlockchainProvider",id:"setting-up-the-blockchainprovider",level:2},{value:"Understanding the useBlockchain Hook",id:"understanding-the-useblockchain-hook",level:2},{value:"Creating a Custom Connect Button",id:"creating-a-custom-connect-button",level:2}];function l(n){const t={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,s.R)(),...n.components};return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsx)(t.header,{children:(0,c.jsx)(t.h1,{id:"creating-custom-ui-components",children:"Creating Custom UI Components"})}),"\n",(0,c.jsx)(t.p,{children:"This guide will walk you through creating custom UI components using the useBlockchain hook and implementing your own connect button similar to the pre-built components like AddressDisplay and BalanceDisplay."}),"\n",(0,c.jsx)(t.h2,{id:"setting-up-the-blockchainprovider",children:"Setting up the BlockchainProvider"}),"\n",(0,c.jsx)(t.p,{children:"Before creating custom components, you need to wrap your application with the BlockchainProvider:"}),"\n",(0,c.jsx)(t.pre,{children:(0,c.jsx)(t.code,{className:"language-tsx",children:"import { BlockchainProvider } from '../hooks/BlockchainContext';\nimport { EasyaConfig } from '@easya/layer-js/dist/core/types';\n\nconst config: EasyaConfig = {\n  // Your configuration options\n};\n\nfunction App() {\n  return (\n    <BlockchainProvider config={config}>\n      {/* Your application components */}\n    </BlockchainProvider>\n  );\n}\n"})}),"\n",(0,c.jsx)(t.h2,{id:"understanding-the-useblockchain-hook",children:"Understanding the useBlockchain Hook"}),"\n",(0,c.jsx)(t.p,{children:"The useBlockchain hook provides access to various blockchain functionalities:"}),"\n",(0,c.jsx)(t.pre,{children:(0,c.jsx)(t.code,{className:"language-tsx",children:"const {\n  connectionStatus,        // Current connection status\n  connectToBlockchain,    // Function to connect\n  disconnectFromBlockchain, // Function to disconnect\n  getAddress,            // Get wallet address\n  getBalance,            // Get wallet balance\n  // ... other functions\n} = useBlockchain();\n"})}),"\n",(0,c.jsx)(t.h2,{id:"creating-a-custom-connect-button",children:"Creating a Custom Connect Button"}),"\n",(0,c.jsx)(t.p,{children:"Here's an example of creating a custom connect button component:"}),"\n",(0,c.jsx)(t.pre,{children:(0,c.jsx)(t.code,{className:"language-tsx",children:"import React from 'react';\nimport { useBlockchain } from '../hooks/BlockchainContext';\nimport { ConnectionStatus } from './types';\n\ninterface ConnectButtonProps {\n  className?: string;\n}\n\nexport const ConnectButton: React.FC<ConnectButtonProps> = ({ \n  className = '' \n}) => {\n  const { \n    connectionStatus, \n    connectToBlockchain, \n    disconnectFromBlockchain \n  } = useBlockchain();\n\n  const handleConnection = async () => {\n    if (connectionStatus === ConnectionStatus.CONNECTED) {\n      await disconnectFromBlockchain();\n    } else {\n      await connectToBlockchain();\n    }\n  };\n\n  const getButtonText = () => {\n    switch (connectionStatus) {\n      case ConnectionStatus.CONNECTED:\n        return 'Disconnect';\n      case ConnectionStatus.CONNECTING:\n        return 'Connecting...';\n      case ConnectionStatus.DISCONNECTING:\n        return 'Disconnecting...';\n      default:\n        return 'Connect Wallet';\n    }\n  };\n\n  const getButtonClassName = () => {\n    const baseClass = 'easya-connect-button';\n    const statusClass = connectionStatus === ConnectionStatus.CONNECTED\n      ? `${baseClass}--connected`\n      : `${baseClass}--disconnected`;\n    \n    return `${baseClass} ${statusClass} ${className}`.trim();\n  };\n\n  return (\n    <button\n      className={getButtonClassName()}\n      onClick={handleConnection}\n      disabled={\n        connectionStatus === ConnectionStatus.CONNECTING ||\n        connectionStatus === ConnectionStatus.DISCONNECTING\n      }\n    >\n      {getButtonText()}\n    </button>\n  );\n};\n\nexport default ConnectButton;\n"})})]})}function d(n={}){const{wrapper:t}={...(0,s.R)(),...n.components};return t?(0,c.jsx)(t,{...n,children:(0,c.jsx)(l,{...n})}):l(n)}},8453:(n,t,e)=>{e.d(t,{R:()=>a,x:()=>i});var o=e(6540);const c={},s=o.createContext(c);function a(n){const t=o.useContext(s);return o.useMemo((function(){return"function"==typeof n?n(t):{...t,...n}}),[t,n])}function i(n){let t;return t=n.disableParentContext?"function"==typeof n.components?n.components(c):n.components||c:a(n.components),o.createElement(s.Provider,{value:t},n.children)}}}]);