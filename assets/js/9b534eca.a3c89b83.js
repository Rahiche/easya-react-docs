"use strict";(self.webpackChunkeasya_react_docs=self.webpackChunkeasya_react_docs||[]).push([[907],{3479:(n,e,s)=>{s.r(e),s.d(e,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>o,metadata:()=>c,toc:()=>a});const c=JSON.parse('{"id":"components-basics/BlockchainProvider","title":"BlockchainProvider","description":"A React context provider that manages blockchain connectivity, transactions, and state management for blockchain operations.","source":"@site/docs/components-basics/BlockchainProvider.mdx","sourceDirName":"components-basics","slug":"/components-basics/BlockchainProvider","permalink":"/components-basics/BlockchainProvider","draft":false,"unlisted":false,"editUrl":"https://github.com/EasyA-Tech/layer-ui-react/tree/main/docs/docs/components-basics/BlockchainProvider.mdx","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"BalancesDisplay","permalink":"/components-basics/BalancesDisplay"},"next":{"title":"ConnectButton","permalink":"/components-basics/ConnectButton"}}');var i=s(4848),t=s(8453);const o={},r="BlockchainProvider",l={},a=[{value:"Features",id:"features",level:2},{value:"Quick Start",id:"quick-start",level:2},{value:"Configuration",id:"configuration",level:2},{value:"Usage",id:"usage",level:2},{value:"Connection States",id:"connection-states",level:2},{value:"Available Methods",id:"available-methods",level:2},{value:"Event System",id:"event-system",level:2}];function d(n){const e={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.R)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.header,{children:(0,i.jsx)(e.h1,{id:"blockchainprovider",children:"BlockchainProvider"})}),"\n",(0,i.jsx)(e.p,{children:"A React context provider that manages blockchain connectivity, transactions, and state management for blockchain operations."}),"\n",(0,i.jsx)(e.h2,{id:"features",children:"Features"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Manages blockchain connection state"}),"\n",(0,i.jsx)(e.li,{children:"Handles transactions and NFT operations"}),"\n",(0,i.jsx)(e.li,{children:"Manages trust lines and token issuance"}),"\n",(0,i.jsx)(e.li,{children:"Provides form value management for blockchain operations"}),"\n",(0,i.jsx)(e.li,{children:"Event subscription system for blockchain events"}),"\n"]}),"\n",(0,i.jsx)(e.h2,{id:"quick-start",children:"Quick Start"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-typescript",children:"import { BlockchainProvider, ConnectButton } from '@easya/layer-ui-react';\n\nconst config = {\n  network: 'testnet',\n  blockchain: 'xrpl',\n  wallet: 'crossmark'\n};\n\nfunction App() {\n  return (\n    <BlockchainProvider config={config}>\n      <ConnectButton />\n    </BlockchainProvider>\n  );\n}\n"})}),"\n",(0,i.jsx)(e.h2,{id:"configuration",children:"Configuration"}),"\n",(0,i.jsxs)(e.p,{children:["The ",(0,i.jsx)(e.code,{children:"BlockchainProvider"})," requires a configuration object with the following properties:"]}),"\n",(0,i.jsxs)(e.table,{children:[(0,i.jsx)(e.thead,{children:(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.th,{children:"Property"}),(0,i.jsx)(e.th,{children:"Type"}),(0,i.jsx)(e.th,{children:"Options"}),(0,i.jsx)(e.th,{children:"Description"})]})}),(0,i.jsxs)(e.tbody,{children:[(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:"network"}),(0,i.jsx)(e.td,{children:"string"}),(0,i.jsx)(e.td,{children:"'testnet' | 'mainnet'"}),(0,i.jsx)(e.td,{children:"Network environment"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:"blockchain"}),(0,i.jsx)(e.td,{children:"string"}),(0,i.jsx)(e.td,{children:"'xrpl'"}),(0,i.jsx)(e.td,{children:"Blockchain platform (more options coming soon)"})]}),(0,i.jsxs)(e.tr,{children:[(0,i.jsx)(e.td,{children:"wallet"}),(0,i.jsx)(e.td,{children:"string"}),(0,i.jsx)(e.td,{children:"'crossmark' | 'gem'"}),(0,i.jsx)(e.td,{children:"Supported wallet provider"})]})]})]}),"\n",(0,i.jsx)(e.h2,{id:"usage",children:"Usage"}),"\n",(0,i.jsx)(e.p,{children:"Wrap your application with the provider:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-tsx",children:"import { BlockchainProvider } from './BlockchainContext';\n\nconst config = {\n  // Your Easya SDK configuration\n};\n\nfunction App() {\n  return (\n    <BlockchainProvider config={config}>\n      {/* Your app components */}\n    </BlockchainProvider>\n  );\n}\n"})}),"\n",(0,i.jsx)(e.p,{children:"Access blockchain functionality in your components:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-tsx",children:"import { useBlockchain } from './BlockchainContext';\n\nfunction MyComponent() {\n  const { \n    connectToBlockchain, \n    sendTransaction, \n    getBalance \n  } = useBlockchain();\n\n  // Use the functions as needed\n}\n"})}),"\n",(0,i.jsx)(e.h2,{id:"connection-states",children:"Connection States"}),"\n",(0,i.jsx)(e.p,{children:"The provider tracks these connection states:"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"DISCONNECTED"}),": Initial state or after disconnection"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"CONNECTING"}),": During connection attempt"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"CONNECTED"}),": Successfully connected"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"DISCONNECTING"}),": During disconnection process"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"FAILED"}),": Connection or operation failed"]}),"\n"]}),"\n",(0,i.jsx)(e.h2,{id:"available-methods",children:"Available Methods"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"connectToBlockchain()"}),": Initiates blockchain connection"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"disconnectFromBlockchain()"}),": Safely disconnects from blockchain"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"sendTransaction()"}),": Executes blockchain transactions"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"mintNFT()"}),": Creates new NFTs"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"getBalance()"}),": Retrieves wallet balance"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"getCurrencySymbol()"}),": Gets current currency symbol"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"getAddress()"}),": Retrieves wallet address"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"getNFTs()"}),": Lists owned NFTs"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"transferNFT()"}),": Transfers NFT ownership"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"createTrustLine()"}),": Establishes trust lines"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"issueToken()"}),": Creates new tokens"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"subscribeToEvents()"}),": Subscribes to blockchain events"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"unsubscribeFromEvents()"}),": Removes event subscriptions"]}),"\n"]}),"\n",(0,i.jsx)(e.h2,{id:"event-system",children:"Event System"}),"\n",(0,i.jsx)(e.p,{children:"Subscribe to blockchain events:"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-tsx",children:"const { subscribeToEvents, unsubscribeFromEvents } = useBlockchain();\n\n// Subscribe to events\nsubscribeToEvents('transactionComplete', (data) => {\n  console.log('Transaction completed:', data);\n});\n\n// Cleanup\nunsubscribeFromEvents('transactionComplete');\n"})})]})}function h(n={}){const{wrapper:e}={...(0,t.R)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(d,{...n})}):d(n)}},8453:(n,e,s)=>{s.d(e,{R:()=>o,x:()=>r});var c=s(6540);const i={},t=c.createContext(i);function o(n){const e=c.useContext(t);return c.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function r(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(i):n.components||i:o(n.components),c.createElement(t.Provider,{value:e},n.children)}}}]);